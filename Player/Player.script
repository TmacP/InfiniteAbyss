-- player.script

local speed = 300      -- Adjust the speed as needed
local gravity = -100    -- Adjust the gravity as needed
local swimHeight = 200   -- The max height one touch can swim up

-- debug
local debugMode = true

function init(self)
	msg.post(".", "acquire_input_focus")  -- Acquire input focus for the script
	self.currentHeight = 0  -- Initialize the current height
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if action.pressed then
			-- When the screen is touched, set a flag to move the player up
			self.is_touched = true
			-- Save the initial touch position for comparison
			self.touchStartPosition = action.x

			-- DEBUG
			-- Print the touch coordinates
			if debugMode then print("Touch coordinates: x=" .. action.x) end
			-- Print the coordinates of the player game object
			if debugMode then print("Player coordinates: x=" .. go.get_position().x) end
			-- Print direction
			if debugMode then
				local touchDirection = (action.x < go.get_position().x) and "Left of player" or "Right of player"
				print("Touch is " .. touchDirection)
			end
			-- DEBUG end

			-- Flip the sprite horizontal based on touch
			local bee_position = go.get_position()
			if action.x < bee_position.x then
				sprite.set_hflip("#sprite", true)
			else
				sprite.set_hflip("#sprite", false)
			end
		elseif action.released then
			-- When the touch is released, set the flag to false and reset current height
			self.is_touched = false
			self.currentHeight = 0
			self.touchStartPosition = nil
		end
	end
end

function update(self, dt)
	-- Apply gravity continuously to make the player sink when not touched
	go.set_position(vmath.vector3(go.get_position().x, go.get_position().y + gravity * dt, 0))

	-- Move the player up if the touch flag is true and the current height is below swimHeight
	if self.is_touched and self.currentHeight < swimHeight then
		local deltaY = math.min(speed * dt, swimHeight - self.currentHeight)
		go.set_position(vmath.vector3(go.get_position().x, go.get_position().y + deltaY, 0))
		self.currentHeight = self.currentHeight + deltaY
	end
end
