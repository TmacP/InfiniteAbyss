-- player.script
local ENTRANCE1 = { x = 942, y = 226}
local ENTRANCE2 = { x = 1215, y = 226}


local swim_speed = 200   -- Adjust the swim speed as needed
local swim_duration = 0.01 -- Adjust the swim duration in seconds
local deceleration_factor = 1.50 -- Adjust the deceleration factor as needed
local gravity = -50 -- Adjust the gravity as needed

-- Declare center_x and center_y in the global scope
local center_x, center_y

function init(self)
	msg.post(".", "acquire_input_focus")
	self.velocity = vmath.vector3()
	self.facing = 0

	-- Additional variables for swim behavior
	self.is_swimming = false
	self.swim_timer = 0
	self.deceleration_factor = 0
	self.correction = vmath.vector3()  -- Initialize correction vector

	-- Initialize center_x and center_y
	local screen_width = (sys.get_config("display.width") / 2)
	center_x = screen_width
	center_y = sys.get_config("display.height") / 2
end

function update(self, dt)
	-- Update swim timer
	if self.is_swimming then
		self.swim_timer = self.swim_timer - dt
	end

	if self.swim_timer <= 0 then
		self.is_swimming = false
		-- Smoothly decrease velocity using deceleration factor
		self.velocity = self.velocity * (1 - deceleration_factor * dt)
	end

	-- Apply gravity
	self.velocity.y = self.velocity.y + gravity * dt
	
	-- Move the player based on swim input and acceleration
	local dv = self.velocity * dt
	local p = go.get_position()
	go.set_position(p + dv)


	-- reset correction
	self.correction = vmath.vector3()
	
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if action.pressed then
			-- Calculate the angle between touch position and center of the screen
			local touch_angle = math.atan2(action.y - center_y, action.x - center_x)

			-- Set the velocity based on touch angle
			self.velocity.x = math.cos(touch_angle) * swim_speed
			self.velocity.y = math.sin(touch_angle) * swim_speed

			-- Flip the sprite horizontal based on touch
			sprite.set_hflip("#sprite", action.x < center_x)

			-- Start swimming
			self.is_swimming = true
			self.swim_timer = swim_duration
		end
	end
end

function on_message(self, message_id, message, sender)
	-- touch the walls
	if message_id == hash("contact_point_response") then
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
			end
		end
	end
	-- touch the exit
	if message_id == hash("trigger_response") then
		if message.enter then
			-- take action for entry
			if message.group == hash("Exit") then
				go.set_position(vmath.vector3(ENTRANCE2.x,ENTRANCE2.y, 0), "Player")
			end
			if message.group == hash("Exit1") then
				go.set_position(vmath.vector3(ENTRANCE1.x,ENTRANCE1.y, 0), "Player")
			end
		else
			-- take action for exit
			print("I am now outside", message.other_id)
		end
	end
end
